/**
 * Test script to verify PayMongo service configuration
 * Run with: node test-paymongo-config.js
 */

require('dotenv').config();

async function testPayMongoConfig() {
  try {
    console.log('üîç Testing PayMongo Service Configuration...\n');
    
    // Import the service
    const { paymongoService } = await import('./dist/services/paymongoService.js');
    
    // Get service status
    const service = paymongoService();
    const status = service.getServiceStatus();
    
    console.log('üìä Service Configuration:');
    console.log(`   Test Mode: ${status.isTestMode ? '‚úÖ Enabled' : '‚ùå Disabled'}`);
    console.log(`   Mock Mode: ${status.isMockMode ? '‚ö†Ô∏è  Enabled (using mock responses)' : '‚úÖ Disabled (using real API)'}`);
    console.log(`   Has Secret Key: ${status.hasSecretKey ? '‚úÖ Yes' : '‚ùå No'}`);
    console.log(`   Base URL: ${status.baseUrl}`);
    
    console.log('\nüîß Environment Variables:');
    console.log(`   PAYMONGO_SECRET_KEY: ${process.env.PAYMONGO_SECRET_KEY ? '‚úÖ Set' : '‚ùå Not set'}`);
    console.log(`   PAYMONGO_PUBLIC_KEY: ${process.env.PAYMONGO_PUBLIC_KEY ? '‚úÖ Set' : '‚ùå Not set'}`);
    console.log(`   PAYMONGO_TEST_MODE: ${process.env.PAYMONGO_TEST_MODE || 'not set'}`);
    console.log(`   PAYMONGO_MOCK_MODE: ${process.env.PAYMONGO_MOCK_MODE || 'not set'}`);
    
    console.log('\nüí° Recommendations:');
    if (status.isMockMode) {
      console.log('   ‚ö†Ô∏è  Mock mode is enabled - QR codes will be placeholder images');
      console.log('   üìù To use real PayMongo API: Set PAYMONGO_MOCK_MODE=false or remove it');
    } else {
      console.log('   ‚úÖ Real API mode - QR codes will be generated by PayMongo');
      if (!status.hasSecretKey) {
        console.log('   ‚ùå No secret key found - set PAYMONGO_SECRET_KEY for real API calls');
      }
    }
    
    if (!status.hasSecretKey && !status.isMockMode) {
      console.log('   üö® CRITICAL: No secret key and not in mock mode - API calls will fail');
    }
    
    console.log('\n‚úÖ Configuration test completed!');
    
  } catch (error) {
    console.error('‚ùå Error testing PayMongo configuration:', error.message);
    console.log('\nüí° Make sure to:');
    console.log('   1. Run "npm run build" to compile TypeScript');
    console.log('   2. Set up your .env file with PayMongo keys');
    console.log('   3. Check that all dependencies are installed');
  }
}

testPayMongoConfig();
